#!/usr/bin/env bash
# Patche. Version 5.

# Needs at least as much disk space as the biggest file in the directory.

#TODO: Bundle files for upload to IA; 30 seconds * 400000 files = 12000000 = ~139 days
#TODO: Test patch action.
#TODO: Fix the annoying error on commit. See (2016-01-01a02n2) URGHHH Terminal Saved Output.txt (in Nonfiction) for a log.

#Script should run as root.
[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"

export PATCHEVERSION="5"

#Exit if a command returns a nonzero value.
set -e

echo "Setting up logging, part 1"
export NOW="$(date '+%Y.%m.%d-%H.%M.%S.%z')"

echo "Initializing UUID creator"
newuuid() {
	export NEWUUID=$(python -c 'import uuid; print str(uuid.uuid4())')
}
export -f newuuid

echo "Initializing main function body"
patche() {
	echo "Started Patche at $NOW, in $(pwd)."
	if [ "$1" == "help" ]; then
		printf "%b\n" "Commands available:"
		printf "%b\n" " * help"
		printf "%b\n" "   |-> Usage: patche help"
		printf "%b\n" "   '-> Displays this output."
		printf "%b\n" " * patch"
		printf "%b\n" "   |-> Usage: patche patch \e[4mrevision-url\e[0m [\e[4mpassphrase\e[0m]"
		printf "%b\n" "   '-> Downloads and extracts the repository snapshot stored at the given URL."
		printf "%b\n" " * init"
		printf "%b\n" "   |-> Usage: patche init \e[4mpassphrase\e[0m"
		printf "%b\n" "   '-> Creates an empty repository in the current directory."
		printf "%b\n" " * commit"
		printf "%b\n" "   |-> Usage: patche commit"
		printf "%b\n" "   '-> Commits the repository to the server."
		DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
		echo "Done work at $DONETIME."
		exit 0
	fi
	if [ "$1" == "patch" ]; then
		if [ "$2" != "" ]; then
			mkdir -v "./.patche-repo-temp"
			if [ -d "./.patche-repo" ]; then
				echo "Repository needs updating. Removing previous repository data"
				mv -v "./.patche-repo/config/.pbz" "./.patche-repo-temp/.pbz"
				rm -rv "./.patche-repo"
			else
				if [ "$3" != "" ]; then
					echo -n "$3" > "./.patche-repo-temp/.pbz"
				else
					echo "You did not provide a passphrase, or the passphrase was empty. Please provide a non-empty passphrase as the third argument to the patche command."
					DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
					echo "Aborting at $DONETIME."
					exit 1
				fi
			fi
			echo "Downloading new repository data"
			wget -O "./.patche-repo-temp/seed.pax.xz.gpg" "$2"
			gpg --yes --batch --passphrase-file "./.patche-repo-temp/.pbz" "./.patche-repo-temp/seed.pax.xz.gpg"
			rm -v "./.patche-repo-temp/seed.pax.xz.gpg"
			unxz -v "./.patche-repo-temp/seed.pax.xz"
			rm -v "./.patche-repo-temp/seed.pax.xz"
			tar -x -v "./.patche-repo-temp/seed.pax"
			rm -v "./.patche-repo-temp/seed.pax"
			echo "Done extracting downloaded seed record; now patching payload into repository."
			
			echo "Moving all files in current directory to their sha512s"
			mkdir -v "./.patche-repo-temp/record-data-by-hash"
			patchemover() {
				#Record mover
				SHAP=$(shasum -a 512 "$1")
				SHA=${SHAP%% *}
				mv -fv "$1" "./.patche-repo-temp/record-data-by-hash/$SHA"
			}
			export -f patchemover
			find . -type f ! -path "./.patche-repo-temp/*" ! -path "./.patche-repo/*" -exec bash -c 'patchemover "$0"' {} \;

			echo "Removing remaining stuff in current directory"
			find . ! -path "./.patche-repo-temp/*" ! -path "./.patche-repo/*" -exec rm -rfv {} \;

			echo "Rsyncing snapshot directory to current director"
			THISREVISION="$(cat ./.patche-repo/revisions/latest)"
			rsync -av --progress ".patche-repo/revisions/$THISREVISION/snapshot/" "./"
			
			echo "For every file in the current directory\
				(not in ./.patche-repo or ./.patche-repo-temp), replace it\
				with the actual file data"
			patcherecordunpacker() {
				#Record unpacker
				SHA=$(head -n 1 "$1")
				if [ -f "./.patche-repo-temp/record-data-by-hash/$SHA" ]; then
					echo "Since the sha512 contained within that file is the same as\
						one held locally on disk already, moving the local file."
					mv -fv "./.patche-repo-temp/record-data-by-hash/$SHA" "$1"
				else
					echo "Downloading the necessary file from IA, since it is not available locally."
					IAURL=$(sed -n 2p "$1")
					wget -O "./.patche-repo-temp/current.bin.pax.xz.gpg" "$IAURL"
					gpg --yes --batch --passphrase-file "./.patche-repo-temp/.pbz" "./.patche-repo-temp/current.bin.pax.xz.gpg"
					rm -v "./.patche-repo-temp/current.bin.pax.xz.gpg"
					unxz -v "./.patche-repo-temp/current.bin.pax.xz"
					rm -v "./.patche-repo-temp/current.bin.pax.xz"
					tar -x -v "./.patche-repo-temp/current.bin.pax"
					rm -v "./.patche-repo-temp/current.bin.pax"
					echo "Done extracting downloaded record; now patching payload into repository."
					mv -v "./.patche-repo-temp/current.bin" "$1"
				fi
			}
			export -f patcherecordunpacker
			find . -type f ! -path "./.patche-repo-temp/*" ! -path "./.patche-repo/*" -exec bash -c 'patcherecordunpacker "$0"' {} \;
			
			echo "Deleting any remaining files known by their sha512s."
			echo "Done patching repository; cleaning up..."
			rm -rfv "./.patche-repo-temp/"
			DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
			echo "Done work at $DONETIME."
		else
			echo "You did not provide a revision URL to patch into this directory. Please provide the desired revision URL (it's probably a URL ending with \".patcherev5\") as the second argument to the patche command."
			DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
			echo "Aborting at $DONETIME."
			exit 1
		fi
	fi
	if [ "$1" == "init" ]; then
		if [ "$2" != "" ]; then
			echo "Initializing repository..."
			mkdir -p -v "./.patche-repo/logs"
			mkdir -p -v "./.patche-repo/config"
			if [ ! -d "./.patche-repo/revisions" ]; then
				echo "Creating revisions directory"
				mkdir "./.patche-repo/revisions"
			fi
			if [ ! -d "./.patche-repo/revisions/0" ]; then
				echo "Creating initial revision directory"
				mkdir "./.patche-repo/revisions/0"
			fi
			if [ ! -d "./.patche-repo/revisions/0/records-by-hash" ]; then
				echo "Creating hash directory"
				mkdir "./.patche-repo/revisions/0/records-by-hash"
			fi
			if [ ! -d "./.patche-repo/revisions/0/records-by-hash/uploaded" ]; then
				echo "Creating uploaded records directory"
				mkdir "./.patche-repo/revisions/0/records-by-hash/uploaded"
			fi
			echo -n "0" > "./.patche-repo/revisions/latest"
			echo "Set repository revision to 0."
			echo -n "$2" > "./.patche-repo/config/.pbz"
			echo "Set repository passphrase to second argument."
			newuuid
			echo -n "$NEWUUID" > "./.patche-repo/config/.uuid"
			echo "Set repository ID to $NEWUUID."
			DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
			echo "Done work at $DONETIME."
			exit 0
		else
			echo "You did not provide a passphrase. Please provide your desired passphrase as the second argument to the patche command."
			DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
			echo "Aborting at $DONETIME."
			exit 1
		fi
	fi
	if [ "$1" == "commit" ]; then
		echo "Committing changes..."
		echo "Configuring iu"
		iu() {
			TIMEZONE=$(date +%z)
			IUIDENTIFIER=$(python -c 'import uuid; print str(uuid.uuid4())')-$(date +%Y.%m.%d.%H.%M.%S.%N)-$(xxd -pu <<< "$TIMEZONE")
			DIRECTORY=$(pwd)
			DIRECTORYHEX=$(xxd -pu <<< "$DIRECTORY")
			REPOID="$(cat ./.patche-repo/config/.uuid)"
			export UPLOADURLPREFIX='https://archive.org/download/'"$IUIDENTIFIER"'/'
			echo "Uploading to $UPLOADURLPREFIX""..."
			ia upload "$IUIDENTIFIER" --metadata="subject:Uploaded using iu for Patche $PATCHEVERSION; Patche repository $REPOID; $DIRECTORYHEX; 0D4F70AC-B0FD-11E5-9069-5A1D60F10656" "$1"
		}
		export -f iu
		LASTREVISION="$(cat ./.patche-repo/revisions/latest)"
		export THISREVISION=$((LASTREVISION+1))

		if [ -d "./.patche-repo/revisions/$THISREVISION" ]; then
			echo "Moving failed revision directory"
			mv -v "./.patche-repo/revisions/$THISREVISION" "./.patche-repo/revisions/$THISREVISION-$NOW"
		fi

		echo "Copying old revision records"
		mkdir -v -p "./.patche-repo/revisions/$THISREVISION/"
		cp -Rv "./.patche-repo/revisions/$LASTREVISION/records-by-hash/" "./.patche-repo/revisions/$THISREVISION/records-by-hash/"

		echo "records-by-hash: Softlinking each file to its sha512"
		patchelink() { 
			echo "Linking record into records-by-hash"
			SHAP=$(shasum -a 512 "$1")
			SHA=${SHAP%% *}
			LINKTARGET="./.patche-repo/revisions/$THISREVISION/records-by-hash/$SHA"
			ln -svf "../../../../$1" "$LINKTARGET"
		}
		export -f patchelink
		find . -type f ! -path "./.patche-repo/revisions/$THISREVISION/records-by-hash/*" -exec bash -c 'patchelink "$0"' {} \;

		echo "snapshot: Cloning the directory tree, copying any special files"
		rsync -av --progress --exclude=.patche-repo/revisions/"$LASTREVISION"/snapshot --exclude=.patche-repo/revisions/"$THISREVISION"/snapshot --no-i-r --include '*/' --exclude '*' . "./.patche-repo/revisions/$THISREVISION/snapshot"
		find . ! -type f -print0 > "./.patche-repo/revisions/$THISREVISION/oddfilelist"
		rsync -0 -av --progress --no-i-r --files-from="./.patche-repo/revisions/$THISREVISION/oddfilelist" ./ "./.patche-repo/revisions/$THISREVISION/snapshot/"

		echo "uploaded: For each file present in records-by-hash and not in uploaded, uploading it and adding the URL to uploaded folder"
		patcheupload() {
			echo "Starting record uploader"
			SHAP=$(shasum -a 512 "$1")
			SHA=${SHAP%% *}
			if ! [ -f "./.patche-repo/revisions/$THISREVISION/records-by-hash/uploaded/$SHA" ]; then
				echo 'File hasn'"'"'t already been uploaded, so uploading it. $1 should be a symlink, but cp should follow it and work with the real file.'
				cp "$1" "./.patche-repo/current.bin"
				echo "Compressing and encrypting current.bin"
				tar -cv --format pax -f "./.patche-repo/current.bin.pax" "./.patche-repo/current.bin"
				rm -v "./.patche-repo/current.bin"
				xz -k -C sha256 -9 -e -v "./.patche-repo/current.bin.pax"
				rm -v "./.patche-repo/current.bin.pax"
				gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "./.patche-repo/config/.pbz" "./.patche-repo/current.bin.pax.xz"
				rm -v "./.patche-repo/current.bin.pax.xz"
				newuuid
				mv "./.patche-repo/current.bin.pax.xz.gpg" "./.patche-repo/$NEWUUID.patche5"
				iu "./.patche-repo/$NEWUUID"".patche5"
				UPLOADURL="$UPLOADURLPREFIX$NEWUUID"".patche5"
				printf -v RECORDSUFFIX '\n%s' "$UPLOADURL"
				RECORDDATA="$SHA$RECORDSUFFIX"
				echo "Record data: "
				echo "$RECORDDATA"
				echo "$RECORDDATA" > "./.patche-repo/revisions/$THISREVISION/snapshot/""$1"
				echo -n "$UPLOADURL" > "./.patche-repo/revisions/$THISREVISION/records-by-hash/uploaded/""$SHA"
				echo "Removing: "
				rm -v "./.patche-repo/$NEWUUID"".patche5"
			fi
		}
		export -f patcheupload
		find "./.patche-repo/revisions/$THISREVISION/records-by-hash/" -type l -exec bash -c 'patcheupload "$0"' {} \;

		echo "Compressing and uploading repository data"
		echo "Removing: "
		rm -fv "./.patche-repo/snapshot.pax"
		echo "Removing: "
		rm -fv "./.patche-repo/snapshot.pax.xz"
		tar -cv --format pax --exclude "./.patche-repo/snapshot.pax" -f "./.patche-repo/snapshot.pax" "./.patche-repo/"
		xz -k -C sha256 -9 -e -v "./.patche-repo/snapshot.pax"
		echo "Removing: "
		rm -v "./.patche-repo/snapshot.pax"
		gpg --yes -c --cipher-algo AES256 --batch --passphrase-file "./.patche-repo/config/.pbz" "./.patche-repo/snapshot.pax.xz"
		echo "Removing: "
		rm -v "./.patche-repo/snapshot.pax.xz"
		newuuid
		mv "./.patche-repo/snapshot.pax.xz.gpg" "./.patche-repo/$NEWUUID.patcherev5"
		iu "./.patche-repo/$NEWUUID"".patcherev5"
		UPLOADURL="$UPLOADURLPREFIX$NEWUUID"".patcherev5"
		echo -n "$UPLOADURL" > "./.patche-repo/revisions/$THISREVISION/revision"
		echo "Removing: "
		rm -v "./.patche-repo/$NEWUUID"".patcherev5"

		echo "Commit is now complete and was successful, so cleaning up the previous revision data, and increment the latest revision ID."
		echo "Removing: "
		rm -rv "./.patche-repo/revisions/$LASTREVISION/records-by-hash/"
		echo "Removing: "
		rm -rfv "./.patche-repo/revisions/$LASTREVISION/snapshot/"
		echo -n "$THISREVISION" > "./.patche-repo/revisions/latest"
		find "./.patche-repo/revisions/." ! -path "./.patche-repo/revisions/." ! -path "./.patche-repo/revisions/./" ! -path "./.patche-repo/revisions/./$THISREVISION/" ! -path "./.patche-repo/revisions/./$THISREVISION/*" ! -path "./.patche-repo/revisions/$THISREVISION/" ! -path "./.patche-repo/revisions/$THISREVISION/*" ! -path "./.patche-repo/revisions/./latest" ! -path "./.patche-repo/revisions/latest" -exec rm -rfv {} \;
		echo -n "$THISREVISION" > "./.patche-repo/revisions/latest"
		echo "Committed revision $THISREVISION."
		echo "This revision of this repository can be downloaded from:"
		echo "$UPLOADURL"
		DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
		echo "Done work at $DONETIME."
		exit 0
	fi
	echo "No action or unknown action specified. Available actions are: help, patch, init, commit"
	DONETIME="$(date '+%Y.%m.%d-%H.%M.%S.%z')"
	echo "Aborting at $DONETIME."
	exit 1
}

if [ "$1" == "help" ]; then
	patche "$@"
elif [ "$1" == "" ]; then
	patche "$@"
else
	echo "Set up logging, step 2"
	echo "Setting up logging..."
	mkdir -p -v "./.patche-repo/logs"
	outfile="./.patche-repo/logs/$NOW.log"
	echo "Are you sure you want to continue? This may destroy the directory structure and any data in $(pwd); back it up first! Make sure you have run ia configure before using Patche."
	read -n1 -r -p "Press y to continue if you're sure; any other key to cancel. " RESPONSE
	if [ "$RESPONSE" == 'y' ]; then
		# Space pressed
		echo
		patche "$@" 2>&1 | tee -a "$outfile"
	else
		# Anything else pressed
		echo
		echo "Aborting."
		exit 0
	fi
fi
