#!/bin/bash
# Crystallise
# Version:
export crystalliseVersion='2.0'

# You need a file named config.txt in your home directory with a title, a collection identifier and a passphrase, each in its own line.

#Requires ia (https://pypi.python.org/pypi/internetarchive) to be installed and configured. Requires wget and hashdeep.

#Script must be run as root.

#Usage: crystallise <files>
#The file(s) being crystallised must be within the current directory. The script tests for some simple cases of this, but not all of them.

#TODO: Have decrystallise verify checksums.

[ "$(whoami)" != "root" ] && exec sudo -- "$0" "$@"

#Script should exit if any operation fails.
set -e

if [ "$1" == "" ] || [ "$1" == "." ] || [ "$1" == ".." ] || [ "$1" == "./" ] || [[ "$1" =~ ^../ ]]; then
    echo "Please specify file(s) within the current directory to crystallise."
    exit 1
fi

CrystalID=Crystal-$(date +%Y.%m.%d.%H.%M.%S.%N)-$(xxd -pu <<< "$(date +%z)")-$(python -c 'import uuid; print str(uuid.uuid4())')
export CrystalID

crystallise-logsession "$CrystalID" "$@" 2>&1 | tee -a "$CrystalID"

echo "Finishing; please wait for completion..."
xz -C sha256 -9 -e "$CrystalID"
rsync -aq --checksum "$CrystalID".xz /Ember\ Media\ Library/Futuramerlin\ Projects/Data/Crystal\ Index/"$CrystalID".log.xz
gpg --yes -c -q --cipher-algo AES256 --batch --passphrase-file "$CrystalID".tmp ./"$CrystalID".xz
rm ./"$CrystalID".tmp
mv ./"$CrystalID".xz.gpg ./"$CrystalID".coal5-log
ia upload "$CrystalID" --metadata="subject:Uploaded using Crystallise $crystalliseVersion; Crystallise log; log; logs; 1EA21BD8-DB7E-11E5-9733-728C37852114; $crystalTitle" --metadata="collection:$crystalCollection" --delete ./"$CrystalID".coal5-log
echo "Done!"